Las colecciones de matrices ofrecen varias formas de acceder a sus elementos.

Las posiciones están 0indexadas. Se puede acceder a los objetos de la matriz utilizando el []método que puede tomar varios argumentos, como se explica a continuación.

arr = [9, 5, 1, 2, 3, 4, 0, -1]
Un número que es la posición del elemento.
>> arr [4]
  => 3
o

>> arr.at (4)
  => 3 
Un rango que indica la posición inicial y final.
>> arr [1..3] # .. indica que ambos índices son inclusivos. 
  => [5,1,2]
>> arr [1 ... 3] # ... indica que el último índice está excluido.
  => [5,1]
Índice de inicio y longitud del rango
>> arr [1,4]
  => [5, 1, 2, 3]
Para este desafío, su tarea es completar las funciones usando la sintaxis como se explicó anteriormente.


def element_at(arr, index)
    # return the element of the Array variable `arr` at the position `index`
    # arr.at(index) # or
    # arr[index]
end

def inclusive_range(arr, start_pos, end_pos)
    # return the elements of the Array variable `arr` between the start_pos and end_pos (both inclusive)
end

def non_inclusive_range(arr, start_pos, end_pos)
    # return the elements of the Array variable `arr`, start_pos inclusive and end_pos exclusive
end

def start_and_length(arr, start_pos, length)
    # return `length` elements of the Array variable `arr` starting from `start_pos`
end