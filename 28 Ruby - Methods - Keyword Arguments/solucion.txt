def convert_temp(temp, input_scale:, output_scale: 'Celsius')
    case input_scale.downcase
    when 'fahrenheit'
        return output_scale == 'kelvin' ? 
        ((temp - 32) / 1.8) + 273.15 : (temp - 32) / 1.8
    when 'celsius'
        return output_scale == 'kelvin' ? 
        temp + 273.15 : (temp * 1.8) + 32
    when 'kelvin'
        return output_scale == 'celsius' ? 
        temp - 273.15 : (temp - 273.15) * 1.8
    end
end




$hash = {   k_to_c: Proc.new { |k| k - 273.15 } ,
            f_to_c: Proc.new { |f| (f - 32) * 5.0/9.0},
            c_to_f: Proc.new { |c| c * 5.0/9.0 + 32},
            c_to_k: Proc.new { |c| c + 273.15},
            k_to_f: Proc.new { |k| k * 5.0/9.0 + 32 + 273.15},
            f_to_k: Proc.new { |f| (f - 32) * 5.0/9.0 + 273.15}
}

def convert_temp (temp, input_scale: 'kelvin', output_scale: 'celsius')
    return temp if input_scale == output_scale
    sym = "#{input_scale[0]}_to_#{output_scale[0]}".to_sym
    proc = $hash[sym]
    if proc
      proc.call(temp)
    else
      temp
    end
end



module Conversion
  CONVERSION_METHODS = {
    k_to_c: -> (k) { k - 273.15 },
    f_to_c: -> (f) { (f - 32) * 5.0 / 9.0 },
    c_to_f: -> (c) { c * 5.0 / 9.0 + 32 },
    c_to_k: -> (c) { c + 273.15 },
    k_to_f: -> (k) { k * 5.0 / 9.0 + 32 + 273.15 },
    f_to_k: -> (f) { (f - 32) * 5.0 / 9.0 + 273.15 }
  }

  def convert_temp(temp, input_scale: 'kelvin', output_scale: 'celsius')
    method_name = "#{input_scale[0]}_to_#{output_scale[0]}".to_sym
    if !!(method_ref = CONVERSION_METHODS[method_name])
      return method_ref.call(temp)
    end
    temp
  end
end

class Object
  include Conversion
end




